Voltz CSCE693 Homework 1 Notes

- Server is single-process (not using threads...) (want it to do as little work as possible)
        - server should send info to client and then wait for another connection/request 
                - method to establish connection
                - method to handle commands 
                
        - the server should have the information to display to the user 
                - user session (randomly generated)
                - server time (?)
                - 
                
        - interrupts 
                - include a timeout for request...(send again?)
                
- Files that don't get edited 
        - server_main.cpp
        - client_main.cpp 
        - Server.cpp 
        - Client.cpp 
        - associated header files

- paste in for test
1
2
3
4
5
menu
1

aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa

- Current issues 


CODE THOUGHTS:

// Method to interpret user commands and perform an action on the client side (?)
// Returns Command Number to the server for processing. 
// If 10 invalid commands are executed without a valid command, disconnects the user. 
int decision(int connctionNum)
{
        std::string usrCommand;
        int success = 0;
        int commandNumber = 0;
        // get the user choice 
        std::cout << "Hello, Please enter your command or type menu for options:" << std::endl; 
        options();
        getline(std::cin, usrCommand);
        
        if(strcmp(usrCommand, "1"))
        {
                return 1;
        }
        else if(strcmp(usrCommand, "2"))
        {
                return 2;
        }
        else if(strcmp(usrCommand, "3"))
        {
                return 3;
        }
        else if(strcmp(usrCommand, "4"))
        {
                return 4;
        }
        else if(strcmp(usrCommand, "5"))
        {
                return 5;
        }
        else if(strcmp(usrCommand, "passwd"))
        {
                std::string currPassword;
                std::string password1;
                std::string password2;
                // fully implemented later
                std::cout << "Please enter your current password: " << std::endl;
                getline(std::cin, currPassword);
                // if correct 
                //{
                std::cout << "Please enter new password: " << std::endl;
                getline(std::cin, password1);
                std::cout << std::endl << "Please enter the same new password again: " << std::endl; 
                getline(std::cin, password2);
                if(strcmp(password1, password2) == 0)
                {
                        // TODO:Actually implement changing password
                        std::cout << "Password changed (in HW2)" << std::endl;
                }
                else //new passwords did not match
                {
                        std::cout << "Password change failed, please try again" << std::endl;
                }
                //}
                
        }
        else if(strcmp(usrCommand, "2"))
        {
                std::cout << "MENU:" << std::endl;
                options();

        }
        else
        {
                std::cout << "Invalid command. Please use command "menu" for assistance." << std::endl;
        }

}

// This is a method that prints out the current options for users 
// It is put in a method for cleaner programming practices so one change affects all instances 
void options()
{
        std::cout << "1: ???" << std::endl 
                  << "2: ???" << std::endl 
                  << "3: ???" << std::endl 
                  << "4: ???" << std::endl 
                  << "5: ???" << std::endl 
                  << "passwd: Change your password" << std::endl 
                  << "exit: Disconnect from server" << std::endl 
                  << "menu: Displays this menu" << std::endl;


}
